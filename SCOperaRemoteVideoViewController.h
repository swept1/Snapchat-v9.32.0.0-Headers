//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "UIViewController.h"

#import "BCOVPlaybackControllerDelegate.h"
#import "SCOperaPageableViewController.h"
#import "SCOperaRemoteVideoPropertiesListener.h"
#import "SCOperaRemoteVideoProxyListener.h"
#import "SCOperaRemoteVideoStateDelegate.h"
#import "SCOperaVideoControlsViewDataSource.h"
#import "SCOperaVideoControlsViewDelegate.h"

@class AVPlayerItemVideoOutput, AVPlayerLayer, CALayer, FBKVOController, NSArray, NSDictionary, NSMutableDictionary, NSObject<BCOVPlaybackController>, NSString, NSTimer, SCOperaConfiguration, SCOperaEventListenerAnnouncer, SCOperaRemoteVideoSessionConsumer, SCOperaRemoteVideoState, SCOperaRemoteVideoView, SCStopwatch, UIColor;

@interface SCOperaRemoteVideoViewController : UIViewController <BCOVPlaybackControllerDelegate, SCOperaVideoControlsViewDelegate, SCOperaRemoteVideoStateDelegate, SCOperaVideoControlsViewDataSource, SCOperaRemoteVideoPropertiesListener, SCOperaRemoteVideoProxyListener, SCOperaPageableViewController>
{
    SCOperaRemoteVideoView *_view;
    AVPlayerItemVideoOutput *_videoOutput;
    _Bool _videoHasPlayed;
    _Bool _captionIsInitialized;
    _Bool _shouldShowCaption;
    _Bool _videoHasCaptions;
    CALayer *_subtitleLayer;
    _Bool _ignoreUpdateToSubtitleVideoSize;
    _Bool _isFullscreen;
    NSMutableDictionary *_videoProgress;
    SCStopwatch *_mediaDisplayedTime;
    _Bool _wasBeingPresented;
    SCOperaEventListenerAnnouncer *_announcer;
    NSDictionary *_context;
    SCOperaConfiguration *_configuration;
    _Bool _isInline;
    NSString *_firstFrameImageKey;
    UIColor *_primaryColor;
    _Bool _shouldAutoPlayWhenReady;
    _Bool _isReady;
    _Bool _isSeeking;
    id <SCOperaPageableViewControllerDelegate> _pageableViewControllerDelegate;
    id <SCOperaRemoteVideoControllerDelegate> _delegate;
    NSString *_videoID;
    NSArray *_bcovVideos;
    AVPlayerLayer *_playerLayer;
    SCOperaRemoteVideoSessionConsumer *_sessionConsumer;
    NSTimer *_controlsFadeTimer;
    long long _virtualOrientation;
    SCOperaRemoteVideoState *_state;
    FBKVOController *_observeController;
    NSObject<BCOVPlaybackController> *_bcovController;
    NSString *_deviceOrientationManagerToken;
}

+ (id)remoteVideoViewControllerWithVideoId:(id)arg1 configuration:(id)arg2 eventAnnouncer:(id)arg3 eventContext:(id)arg4 isInline:(_Bool)arg5 firstFrameImageKey:(id)arg6 primaryColor:(id)arg7;
@property(nonatomic) _Bool isSeeking; // @synthesize isSeeking=_isSeeking;
@property(nonatomic) _Bool isReady; // @synthesize isReady=_isReady;
@property(copy, nonatomic) NSString *deviceOrientationManagerToken; // @synthesize deviceOrientationManagerToken=_deviceOrientationManagerToken;
@property(retain, nonatomic) NSObject<BCOVPlaybackController> *bcovController; // @synthesize bcovController=_bcovController;
@property(retain, nonatomic) FBKVOController *observeController; // @synthesize observeController=_observeController;
@property(retain, nonatomic) SCOperaRemoteVideoState *state; // @synthesize state=_state;
@property(nonatomic) long long virtualOrientation; // @synthesize virtualOrientation=_virtualOrientation;
@property(nonatomic) _Bool shouldAutoPlayWhenReady; // @synthesize shouldAutoPlayWhenReady=_shouldAutoPlayWhenReady;
@property(retain, nonatomic) NSTimer *controlsFadeTimer; // @synthesize controlsFadeTimer=_controlsFadeTimer;
@property(retain, nonatomic) SCOperaRemoteVideoSessionConsumer *sessionConsumer; // @synthesize sessionConsumer=_sessionConsumer;
@property(retain, nonatomic) AVPlayerLayer *playerLayer; // @synthesize playerLayer=_playerLayer;
@property(retain, nonatomic) NSArray *bcovVideos; // @synthesize bcovVideos=_bcovVideos;
@property(readonly, nonatomic) NSString *videoID; // @synthesize videoID=_videoID;
@property(nonatomic) __weak id <SCOperaRemoteVideoControllerDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) __weak id <SCOperaPageableViewControllerDelegate> pageableViewControllerDelegate; // @synthesize pageableViewControllerDelegate=_pageableViewControllerDelegate;
- (void).cxx_destruct;
- (double)totalVideoDurationSeconds;
- (long long)numberOfBytesTransferredToBCOVPlaybackController;
- (struct CGSize)videoSize;
- (void)_sendEventBrightcoveError:(id)arg1 AVFoundationError:(id)arg2 URI:(id)arg3;
- (void)_sendEventDidChangeConfiguration;
- (void)showActivityIndicator:(_Bool)arg1;
- (void)setProgress:(double)arg1 forIndex:(unsigned long long)arg2;
- (void)seekToTime:(double)arg1 tolerance:(CDStruct_1b6d18a9)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)seekToTime:(double)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)videoControlsView:(id)arg1 didSeekToTime:(double)arg2;
- (void)videoControlsViewDidPressExit:(id)arg1;
- (void)videoControlsView:(id)arg1 didEndSeekingWithPlayButtonToggled:(_Bool)arg2;
- (void)videoControlsViewDidBeginSeeking:(id)arg1;
- (void)videoControlsView:(id)arg1 didTogglePlay:(_Bool)arg2;
- (void)videoControlsView:(id)arg1 didToggleRotateLeft:(_Bool)arg2;
- (void)videoControlsView:(id)arg1 didToggleCaption:(_Bool)arg2;
- (void)videoControlsView:(id)arg1 didToggleVolume:(_Bool)arg2;
- (void)playerItemLikelyToKeepUp:(id)arg1;
- (void)playerItemBufferBecameEmpty:(id)arg1;
- (void)currentItemDidChange:(id)arg1;
- (void)playbackController:(id)arg1 didAdvanceToPlaybackSession:(id)arg2;
- (void)playbackController:(id)arg1 playbackSession:(id)arg2 didProgressTo:(double)arg3;
- (void)playbackController:(id)arg1 playbackSession:(id)arg2 didReceiveLifecycleEvent:(id)arg3;
- (void)updateSubtitleLayerScreenSize;
- (void)subtitleLayerVideoSizeChanged;
- (void)updateCaptionStyle;
- (void)toggleCaption:(_Bool)arg1;
- (void)_updateCaptionBasedOnCurrentDisplayStrategy;
- (void)terminateVideo;
- (void)playVideo:(_Bool)arg1;
- (void)startBufferingVideo;
- (void)state:(id)arg1 didChangeTag:(long long)arg2;
- (void)didFetchVideoPropertiesWithSuccess:(_Bool)arg1;
- (void)setBcovVideosFromProperties:(id)arg1;
- (void)configureRemoteVideo;
- (void)remoteVideoProxyDidAttemptStartup;
- (void)invalidateControlsFadeTimerAndShowControls;
- (void)setupControlsFadeTimer;
- (void)fadeOutControls;
- (void)fadeInControls;
- (void)didTap;
- (CDStruct_1b6d18a9)duration;
- (CDStruct_1b6d18a9)currentTime;
- (void)didRotateFromInterfaceOrientation:(long long)arg1;
- (void)rotateVideoWithTransform:(struct CGAffineTransform)arg1;
- (void)setTargetOrientation:(long long)arg1 andRotateView:(_Bool)arg2;
- (unsigned long long)supportedInterfaceOrientations;
- (void)rotateVideoBasedOnOrientation;
- (void)loadView;
- (void)viewDidDisappear:(_Bool)arg1;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (void)didReceiveMemoryWarning;
- (void)playerItemFailedToPlayToEndTime:(id)arg1;
- (id)videoParameters;
- (void)setResumeVideoPosition:(double)arg1;
- (void)didSetFullscreen:(_Bool)arg1;
- (void)updateWithScreenshot:(id)arg1;
- (id)player;
- (id)_imageSnapshotFromPlayer;
- (id)imageSnapshot;
- (id)snapshotFromPlayer;
- (void)_removeVideoOut:(id)arg1;
- (void)_addVideoOutput;
- (_Bool)isShowingVideoFrame;
- (_Bool)isPaused;
- (_Bool)disablePaging;
- (void)pauseVideo;
- (void)teardown;
- (void)loadVideo;
- (void)setVolume:(double)arg1;
- (void)resume;
- (void)pause;
- (void)viewDidFullyDisappear;
- (void)viewDidPartiallyAppearWithCurrentViewRelativePosition:(unsigned long long)arg1;
- (void)neighborViewDidFullyAppearWithCurrentViewRelativePosition:(unsigned long long)arg1;
- (void)viewDidFullyAppear;
- (void)removeNotificationObservers;
- (void)addNotificationObservers;
- (void)dealloc;
- (id)initWithVideoId:(id)arg1 configuration:(id)arg2 eventAnnouncer:(id)arg3 eventContext:(id)arg4 isInline:(_Bool)arg5 firstFrameImageKey:(id)arg6 primaryColor:(id)arg7 bcovController:(id)arg8 state:(id)arg9 observeController:(id)arg10;
- (id)initWithVideoId:(id)arg1 configuration:(id)arg2 eventAnnouncer:(id)arg3 eventContext:(id)arg4 isInline:(_Bool)arg5 firstFrameImageKey:(id)arg6 primaryColor:(id)arg7;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

