//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class NSString, SCCacheManager, TMDiskCache, TMMemoryCache;

@interface SCCache : NSObject
{
    _Bool _isInvalidated;
    CDUnknownBlockType _didRemoveObjectFromDiskBlock;
    CDUnknownBlockType _didRemoveObjectFromMemoryBlock;
    NSString *_kindName;
    TMMemoryCache *_memoryCache;
    TMDiskCache *_diskCache;
    id <SCEncryptionKeyManagerProtocol> _encryptionKeyManager;
    SCCacheManager *_cacheManager;
    id <SCConcurrentPerforming> _workQueuePerformer;
    id <SCConcurrentPerforming> _diskCacheQueuePerformer;
    id <SCConcurrentPerforming> _completionQueuePerformer;
}

+ (void)setDiskByteLimit:(unsigned long long)arg1;
+ (void)setMemoryByteLimit:(unsigned long long)arg1;
@property(nonatomic) _Bool isInvalidated; // @synthesize isInvalidated=_isInvalidated;
@property(retain, nonatomic) id <SCConcurrentPerforming> completionQueuePerformer; // @synthesize completionQueuePerformer=_completionQueuePerformer;
@property(retain, nonatomic) id <SCConcurrentPerforming> diskCacheQueuePerformer; // @synthesize diskCacheQueuePerformer=_diskCacheQueuePerformer;
@property(retain, nonatomic) id <SCConcurrentPerforming> workQueuePerformer; // @synthesize workQueuePerformer=_workQueuePerformer;
@property(retain, nonatomic) SCCacheManager *cacheManager; // @synthesize cacheManager=_cacheManager;
@property(retain, nonatomic) id <SCEncryptionKeyManagerProtocol> encryptionKeyManager; // @synthesize encryptionKeyManager=_encryptionKeyManager;
@property(retain, nonatomic) TMDiskCache *diskCache; // @synthesize diskCache=_diskCache;
@property(retain, nonatomic) TMMemoryCache *memoryCache; // @synthesize memoryCache=_memoryCache;
@property(readonly, nonatomic) NSString *kindName; // @synthesize kindName=_kindName;
@property(copy, nonatomic) CDUnknownBlockType didRemoveObjectFromMemoryBlock; // @synthesize didRemoveObjectFromMemoryBlock=_didRemoveObjectFromMemoryBlock;
@property(copy, nonatomic) CDUnknownBlockType didRemoveObjectFromDiskBlock; // @synthesize didRemoveObjectFromDiskBlock=_didRemoveObjectFromDiskBlock;
- (void).cxx_destruct;
- (id)getEncryptorForKey:(id)arg1 kind:(id)arg2 p_encryptor:(id)arg3;
- (void)readObjectFromDiskForKey:(id)arg1 withEncryption:(id)arg2 block:(CDUnknownBlockType)arg3;
- (void)executeDiskCompletionBlock:(CDUnknownBlockType)arg1 withKey:(id)arg2 object:(id)arg3 fileURL:(id)arg4;
- (void)executeCompletionBlock:(CDUnknownBlockType)arg1 withKey:(id)arg2 object:(id)arg3;
- (id)decrypt:(id)arg1 withEncryptionKey:(id)arg2 initializationVector:(id)arg3;
- (id)encrypt:(id)arg1 withEncryptionKey:(id)arg2 initializationVector:(id)arg3;
- (void)memoryDidRemoveObject:(id)arg1 key:(id)arg2;
- (void)diskDidRemoveObject:(id)arg1 key:(id)arg2 fileURL:(id)arg3;
- (_Bool)contains:(id)arg1 includingDiskLookup:(_Bool)arg2;
- (void)removeObjectsForKeys:(id)arg1 block:(CDUnknownBlockType)arg2;
- (void)removeAllObjectsWithBlock:(CDUnknownBlockType)arg1;
- (void)removeExpiredContentWithBlock:(CDUnknownBlockType)arg1;
- (void)removeAllObjectsExceptKeys:(id)arg1 block:(CDUnknownBlockType)arg2;
- (void)removeObjectForKey:(id)arg1 block:(CDUnknownBlockType)arg2;
- (void)invalidate;
- (void)objectForKey:(id)arg1 withEncryptor:(id)arg2 block:(CDUnknownBlockType)arg3;
- (void)setDecryptedObject:(id)arg1 encryptedObject:(id)arg2 forKey:(id)arg3 withEncryptor:(id)arg4 expiration:(id)arg5 block:(CDUnknownBlockType)arg6;
- (id)initWithName:(id)arg1 encryptionKeyManager:(id)arg2 cacheManager:(id)arg3;
- (id)initWithName:(id)arg1 encryptionKeyManager:(id)arg2;

@end

